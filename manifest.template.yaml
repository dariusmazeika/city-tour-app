apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    ingress.kubernetes.io/force-ssl-redirect: "true"
    enable-vts-status: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
  name: ${CI_ENVIRONMENT_SLUG}
spec:
  tls:
    - hosts:
        - ${CI_ENVIRONMENT_URL}
      secretName: ${CI_ENVIRONMENT_URL}
  rules:
    - host: ${CI_ENVIRONMENT_URL}
      http:
        paths:
          - backend:
              service:
                name: backend
                port:
                  number: 8000
            path: /
            pathType: Prefix
          - backend:
              service:
                name: media
                port:
                  number: 80
            path: /static/
            pathType: Prefix
          - backend:
              service:
                name: media
                port:
                  number: 80
            path: /media/
            pathType: Prefix

---
kind: Service
apiVersion: v1
metadata:
  name: backend
spec:
  selector:
    app: ${CI_PROJECT_NAME}
  ports:
    - port: 8000
      targetPort: 8000

---
kind: Service
apiVersion: v1
metadata:
  name: media
spec:
  selector:
    app: ${CI_PROJECT_NAME}
  ports:
    - port: 80
      targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
spec:
  selector:
    app: ${CI_PROJECT_NAME}-dep
  ports:
    - protocol: TCP
      port: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: ${CI_PROJECT_NAME}-dep
  ports:
    - protocol: TCP
      port: 6379

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${CI_ENVIRONMENT_SLUG}
  annotations:
    app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
    app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${CI_PROJECT_NAME}
  template:
    metadata:
      labels:
        app: ${CI_PROJECT_NAME}
      annotations:
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
    spec:
      restartPolicy: Always
      containers:
        - name: application
          image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
          imagePullPolicy: IfNotPresent
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: conf.settings_qa
            - name: BUILD_VERSION
              value: "${CI_PIPELINE_ID}"
            - name: RUN_MODE
              value: QA
            - name: DB_USER
              value: psql
            - name: DB_HOST
              value: postgresql
            - name: DB_PORT
              value: "5432"
            - name: APP_HOST
              value: ${CI_ENVIRONMENT_URL}
            - name: CI_PROJECT_TITLE
              value: ${CI_PROJECT_TITLE}
            - name: DJANGO_SUPERUSER_EMAIL
              value: test@test.com
            - name: DJANGO_SUPERUSER_PASSWORD
              value: test
            - name: SENTRY_URL
              value: ${SENTRY_URL}
            - name: ENVIRONMENT
              value: ${ENVIRONMENT}
          ports:
            - containerPort: 8000
          readinessProbe:
            httpGet:
              path: /api/health/
              port: 8000
            failureThreshold: 30
          volumeMounts:
            - mountPath: /app/static
              name: static-files
            - mountPath: /app/media
              name: media-files
        - name: media
          image: nginx:alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/static
              name: static-files
            - mountPath: /usr/share/nginx/html/media
              name: media-files
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: static-files
          emptyDir: {}
        - name: media-files
          persistentVolumeClaim:
            claimName: persistent-storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dependencies
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${CI_PROJECT_NAME}-dep
  template:
    metadata:
      labels:
        app: ${CI_PROJECT_NAME}-dep
    spec:
      restartPolicy: Always
      containers:
        - name: redis
          image: redis:5.0
          ports:
            - containerPort: 6379
        - name: postgresql
          image: postgis/postgis:latest
          env:
            - name: POSTGRES_USER
              value: psql
            - name: POSTGRES_PASSWORD
              value: django
            - name: POSTGRES_DB
              value: django
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: database-storage
      volumes:
        - name: database-storage
          persistentVolumeClaim:
            claimName: database-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: persistent-storage
  labels:
    app: ${CI_PROJECT_NAME}
spec:
  storageClassName: rook-cephfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-storage
  labels:
    app: ${CI_PROJECT_NAME}
spec:
  storageClassName: rook-cephfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
