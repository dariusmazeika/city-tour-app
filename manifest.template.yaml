apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ingress.kubernetes.io/force-ssl-redirect: "true"
    enable-vts-status: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_clear_headers "Server";
  name: ${CI_ENVIRONMENT_SLUG}
spec:
  tls:
    - hosts:
        - ${CI_ENVIRONMENT_URL}
        - minio.${CI_ENVIRONMENT_URL}
      secretName: ${CI_ENVIRONMENT_URL}
  rules:
    - host: ${CI_ENVIRONMENT_URL}
      http:
        paths:
          - backend:
              service:
                name: backend
                port:
                  number: 8000
            path: /
            pathType: Prefix
          - backend:
              service:
                name: media
                port:
                  number: 80
            path: /static/
            pathType: Prefix
    - host: minio.${CI_ENVIRONMENT_URL}
      http:
        paths:
          - backend:
              service:
                name: minio
                port:
                  number: 9000
            path: /
            pathType: Prefix

---
kind: Service
apiVersion: v1
metadata:
  name: backend
spec:
  selector:
    app: ${CI_PROJECT_NAME}
  ports:
    - port: 8000
      targetPort: 8000

---
kind: Service
apiVersion: v1
metadata:
  name: media
spec:
  selector:
    app: ${CI_PROJECT_NAME}
  ports:
    - port: 80
      targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
spec:
  selector:
    app: ${CI_PROJECT_NAME}-dep
  ports:
    - protocol: TCP
      port: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: ${CI_PROJECT_NAME}-dep
  ports:
    - protocol: TCP
      port: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  selector:
    app: ${CI_PROJECT_NAME}-dep
  ports:
    - protocol: TCP
      port: 9000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${CI_ENVIRONMENT_SLUG}
  annotations:
    app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
    app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${CI_PROJECT_NAME}
  template:
    metadata:
      labels:
        app: ${CI_PROJECT_NAME}
      annotations:
        app.gitlab.com/env: ${CI_ENVIRONMENT_SLUG}
        app.gitlab.com/app: ${CI_PROJECT_PATH_SLUG}
    spec:
      restartPolicy: Always
      containers:
        - name: application
          image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: values
          ports:
            - containerPort: 8000
          readinessProbe:
            httpGet:
              path: /health/
              port: 8000
            failureThreshold: 30
          volumeMounts:
            - mountPath: /app/static
              name: static-files
        - name: media
          image: nginx:alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/static
              name: static-files
      imagePullSecrets:
        - name: regcred
        - name: regcred-default
      volumes:
        - name: static-files
          emptyDir: { }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dependencies
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${CI_PROJECT_NAME}-dep
  template:
    metadata:
      labels:
        app: ${CI_PROJECT_NAME}-dep
    spec:
      restartPolicy: Always
      initContainers:
        - name: init-minio
          image: busybox:latest
          command:
            - /bin/sh
          args:
            - '-c'
            - '[ -d /data/media-${CI_PROJECT_NAME} ] || mkdir /data/media-${CI_PROJECT_NAME}'
          volumeMounts:
            - mountPath: /data
              name: media-files
      containers:
        - name: redis
          image: redis:5.0
          ports:
            - containerPort: 6379
        - name: minio
          image: minio/minio
          ports:
            - containerPort: 9000
          command:
            - /bin/sh
          args:
            - '-c'
            - minio server /data
          readinessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            failureThreshold: 30
          volumeMounts:
            - mountPath: /data
              name: media-files
          env:
            - name: MINIO_API_CORS_ALLOW_ORIGIN
              value: "*"
            - name: MINIO_BROWSER
              value: "off"
            - name: MINIO_ROOT_USER
              value: EDRTXJEZ0X6EMKE1BBWA
            - name: MINIO_ROOT_PASSWORD
              value: qxhPwheeKulTs/FJikLSH/czIOQnUcLeQyjRcNCi
            - name: MINIO_SITE_NAME
              value: media-${CI_PROJECT_NAME}
            - name: MINIO_SITE_REGION
              value: eu-central-1
        - name: postgresql
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              value: psql
            - name: POSTGRES_PASSWORD
              value: django
            - name: POSTGRES_DB
              value: django
            - name: PGDATA
              value: /var/lib/postgresql/data/pg_data
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: database-storage
      volumes:
        - name: database-storage
          persistentVolumeClaim:
            claimName: database-storage
        - name: media-files
          persistentVolumeClaim:
            claimName: persistent-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: persistent-storage
  labels:
    app: ${CI_PROJECT_NAME}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 6Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-storage
  labels:
    app: ${CI_PROJECT_NAME}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
