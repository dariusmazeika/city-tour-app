name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  Prepare-virtualenv:
    runs-on: ubuntu-latest
    outputs:
      requirements: ${{ steps.requirements.outputs.requirements }}
      python-version: ${{ steps.requirements.outputs.python-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python v3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Create requirements
        id: requirements
        working-directory: ./backend
        # https://stedolan.github.io/jq/, Takes Pipfile.lock and converts to requirements to reduce run times
        run: |
          jq -r '.develop * .default | to_entries[] | .key + .value.version' Pipfile.lock > requirements.txt
          echo tblib >> requirements.txt
          echo ::set-output name=requirements::$(md5sum requirements.txt | awk "{print $1;}")
          echo ::set-output name=python-version::$(python --version)


      - name: Cache virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/venv
          key: ${{ runner.os }}-${{ steps.requirements.outputs.python-version }}-${{ steps.requirements.outputs.requirements }}

        # Requirements are installed in virtualenv and venv directory is cached and shared in repo
      - name: Install Dependencies
        working-directory: ./backend
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade pip wheel setuptools virtualenv tblib
          virtualenv ~/venv
          ~/venv/bin/pip install --no-cache-dir -r requirements.txt

  Flake8:
    needs: [Prepare-virtualenv]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python v3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Retrieve virtualenv
        uses: actions/cache@v2
        with:
          path: ~/venv
          key: ${{ runner.os }}-${{ needs.Prepare-virtualenv.outputs.python-version }}-${{ needs.Prepare-virtualenv.outputs.requirements }}

      - name: Run Flake8
        working-directory: ./backend
        run: ~/venv/bin/python -m flake8 apps

  MyPy:
    needs: [Prepare-virtualenv]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python v3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Retrieve virtualenv
        uses: actions/cache@v2
        with:
          path: ~/venv
          key: ${{ runner.os }}-${{ needs.Prepare-virtualenv.outputs.python-version }}-${{ needs.Prepare-virtualenv.outputs.requirements }}

      - name: Run MyPy
        working-directory: ./backend
        run: ~/venv/bin/python -m mypy apps --config-file mypy.ini

  Tests:
    needs: [Prepare-virtualenv]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: django
          POSTGRES_DB: django
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python v3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Retrieve virtualenv
        uses: actions/cache@v2
        with:
          path: ~/venv
          key: ${{ runner.os }}-${{ needs.Prepare-virtualenv.outputs.python-version }}-${{ needs.Prepare-virtualenv.outputs.requirements }}

      - name: Run tests
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DJANGO_SETTINGS_MODULE: "conf.settings_test"
          CELERY_BROKER_URL: redis://localhost:6379/0
        working-directory: ./backend
        run: ~/venv/bin/python manage.py test --parallel 5
